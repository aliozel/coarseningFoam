/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          couplingProperties;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//===========================================================================//


parcelStressModellingProps
{
        DEMts 1.e-06;
	rhoParticle 1600;
	dp 145.e-06;
        relativePath "../DEM/post";
        couplingFilename "dump%d.part";
        outputRelativePath "parcelStressModeling";
        treeSearch true;
	notWeighting;	

	verbose;
	exList (0);
	 
	/*
	fluidCoarsening
	{
            //filterWidth ( 1 3 5 7 9 11 13 );
	    filterWidth ( 3 );
	}
	*/
		
        conditionalAve
        {
            outputRelativePath "./parcelStressModeling";
            //variableList ( Pp mup ); // mupSqrtPp normPp normmup); // normmupoff );
            //variableList ( PpMeso mupMeso );
	    //variableList ( Pp mup );
	    variableList ( mappedCoordNumber );
	    averagingVariableList ( alpp );
            alpp
            {
                    fieldName alpp;
                    expression "1-mappedVoidfraction"; //"1-voidfraction";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.6;
            }
        }
	
        conditionalAveCoarsening
        {
            outputRelativePath "./parcelStressModeling";
            variableList ( PpMeso mupMeso filteredPpKT filteredMupKT );
            averagingVariableList ( barAlpp );
            barAlpp
            {
                    fieldName barAlpp;
                    expression "barAlpp";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.6;
            }
        }
	
	/* */
        multiVarsConditionalAve
        {
            outputRelativePath "./parcelStressModeling";
            variableList ( GammaSlip );
            averagingVariableList ( Temp alpp );
            alpp
            {
                    fieldName alpp;
                    expression "1-mappedVoidfraction";
                    autowrite true;
                    nBin 20;
                    min 0.0;
                    max 0.6;
            }
             Temp
            {
                    fieldName Temp;
                    expression "Ppkinetic/max((1-mappedVoidfraction),1e-12)/1500.";
		   
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.04;
            }

    	}
	/* */

        /* */
	multiVarsConditionalAveCoarsening
        {
            outputRelativePath "./parcelStressModeling";
            variableList ( PpMeso );
            averagingVariableList ( tildeUs barAlpp );
            barAlpp
            {
                    fieldName barAlpp;
                    expression "barAlpp";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.6;
            }
            tildeUs
            {
                    fieldName tildeUs;
                    expression "tildeUs.x";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.6;
            }

    	}
	/* */

	/* */
        
	threeVarsConditionalAve
        {
            outputRelativePath "./parcelStressModeling";
            variableList ( Pp );
            averagingVariableList ( gammadot alpp uslip );
            alpp
            {
                    fieldName alpp;
                    expression "1-mappedVoidfraction";
                    autowrite true;
                    nBin 20;
                    min 0.0;
                    max 0.6;
            }
            gammadot
            {
                    fieldName gammadot;
                    expression "sqrt( 0.5 * ( grad(mappedUs) + grad(mappedUs).T() )&&( grad(mappedUs) + grad(mappedUs).T() ) )";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 2500;
            }
            uslip
            {
                    fieldName uslip;
                    expression "U.z-mappedUs.z";
                    autowrite true;
                    nBin 10;
                    min -0.6;
                    max 1.4;
            }
    	}

	threeVarsConditionalAveCoarsening
        {
            outputRelativePath "./parcelStressModeling";
            variableList ( Pp );
            averagingVariableList ( tildeGammadot barAlpp tildeUslip );

            tildeGammadot
            {
                    fieldName gammadot;
                    expression "sqrt( 0.5 * ( grad(tildeUs) + grad(tildeUs).T() )&&( grad(tildeUs) + grad(tildeUs).T() ) )";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 2500;
            }
            barAlpp
            {
                    fieldName barAlpp;
                    expression "barAlpp";
                    autowrite true;
                    nBin 30;
                    min 0;
                    max 0.6;
            }
            tildeUslip
            {
                    fieldName tildeUslip;
                    expression "tildeU.z-tildeUs.z";
                    autowrite true;
                    nBin 10;
                    min -0.6;
                    max 1.4;
            }
    	}	
	/* */	
	
	
	
}

// ************************************************************************* //
