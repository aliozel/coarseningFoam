/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/


FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          couplingProperties;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//===========================================================================//

postProcessingProps
{
    DEMts 1.e-06;
    relativePath "../DEM/post";
    couplingFilename "dump%d.part";
    treeSearch true;
    turbulenceModelType turbulenceModel;

    //filteringWithoutGradPg;
    
    weighthing on;
    weighthingProps
    {
	IDWeighthing off;
	GaussWeighthing on;
    }
    usingLocalEul; // Instead of mapping Lagrangian force
    
    //filterSize 3;
    //testFilterSize 5;
    
    fluidCoarsening
    {
        //filterWidth ( 13 ); 
        //filterWidth ( 1 );
        //filterWidth ( 3 );
        //filterWidth ( 5 );
        //filterWidth ( 7 );
        //filterWidth ( 9 ); 
        //filterWidth ( 11 );
        //filterWidth ( 13 );
        filterWidth ( 3 5 7 9 11 13); 
        //readFilteredVars;
    }

    /* 
    dynamicAdjustment;
    dynamicAdjustmentProps
    {
       proposedFunction (basicForm);
       resolvedFunction (resolvedBasicForm);
       basicForm
       {
               fieldName basicForm;
               expression "pow((barAlpp/0.587),2.25)*pow((1.-barAlpp/0.587),1.8)*(pow(3*3,1.78)/(248+pow(3*3,1.78)))";
	       //expression "pow((barAlpp/0.587),2.25)*pow((1.-barAlpp/0.587),1.8)*(pow(3*3,2.)/(388+pow(3*3,2)))";
	       //expression " pow(5.*vol(),2./3.) * ( grad(1-barAlpf) & grad(1-barAlpf) ) ";
	       autowrite true;
       }
       resolvedBasicForm
       {
               fieldName resolvedBasicForm;
               expression "pow((hatBarAlpp/0.587),2.25)*pow((1.-hatBarAlpp/0.587),1.8)*(pow(3*7,1.78)/(248+pow(3*7,1.78)))";               
	       //expression "pow((hatBarAlpp/0.587),2.25)*pow((1.-hatBarAlpp/0.587),1.8)*(pow(3*7,2.)/(388+pow(3*7,2)))";
               //expression "hatBarAlpp*(0.587-hatBarAlpp)*(pow(3*9,1.1)/(182.+pow(3*9,1.1)))";
	       //expression " pow(7.*vol(),2./3.) * ( grad(hatBarAlpp) & grad(hatBarAlpp) ) ";
               autowrite true;
       }
    }
    */

     
    particleCoarsening{};

    
    parcelCoarsening
    {
        treeSearch true;
        turbulenceModelType turbulenceModel; 
        //numberOfParticlesInParcel ( 8 27 );
        numberOfParticlesInParcel ( 8 27 );
        //numberOfParticlesInParcel ( 125 );
        //numberOfParticlesInParcel ( 8 27 125 343 );   
        //numberOfParticlesInParcel ( 8 27 125 343 729 );
        //numberOfParticlesInParcel ( 8 27 125 343 729 1331 );  
        //numberOfParticlesInParcel ( 8 27 125 343 729 1331 2197 );
        //numberOfParticlesInParcel ( 343 ); 
        //readParcels;
        useAllParticles; 
    }
    

    dragModel BeetstraDragPost; //WenYuDragPost;
    BeetstraDragPostProps //WenYuDragPostProps
    {
       rhoParticle 1600;
       densityFieldName "rho";
       //interpolation;
       maxCellPerPart 30;
       verbose;
       //taupFuncPhi;
       //taupConst;
    }
    
    locateModelPost enginePost;
    enginePostProps
    {
       treeSearch true;
    }
	    
    verbose;
    exList (0);
    
    /* */
    conditionalAve
    {
    	outputRelativePath "./filteredDrag";
	//variableList ( BBmicroLag uSlipLag gijLag alppVdiLag BBmicroEul uSlipEul gijEul alppVdiEul);
    	variableList ( BBmicroLag BBmicroEul BBmicroLagNum BBmicroLagDom BBmicroEulNum BBmicroEulDom );
        //variableList ( BBmicroLag );
	averagingVariableList ( baralpp );
	//averagingVariableList ( gradAlpp );
	//averagingVariableList ( baralpp baralppalpp );	
	//averagingVariableList ( baralpp driftModel ); 
    	//averagingVariableList ( driftModel ); 
	//averagingVariableList ( baralppalpp );
	
	BBmicro
    	{
    		fieldName BBmicro;
		autowrite true;
    	} 
    	uSlipLag
    	{
    		fieldName uSlipLag;
		autowrite true;
    	} 
        gij
        {
                fieldName gij;
                autowrite true;
        }
        BBmicroPos
        {
                fieldName BBmicroPos;
                autowrite true;
        }
        BBmicroNeg
        {
                fieldName BBmicroNeg;
                autowrite true;
        }
    	baralpp
    	{
    		fieldName baralpp;
		expression "1-barAlpf";
		autowrite true;
		nBin 32;
		min 0;
		max 0.64;
		//nBin 1;
                //min 0.19;
                //max 0.21;   
	}	 
        baralppalpp
        {
                fieldName baralppalpp;
                expression "barAlppAlpp-(1-barAlpf)*(1-barAlpf)";
                autowrite true;
                nBin 800;
                min 0;
                max 0.05;
        }
    	driftModel
    	{
    		fieldName driftModel;
		expression "pow(vol(),2./3.)*(grad(1-barAlpf).x+grad(1-barAlpf).y+grad(1-barAlpf).z)*(grad(tildeUf.z).x+grad(tildeUf.z).y+grad(tildeUf.z).z)";
		//expression "(grad(1-barAlpf).x+grad(1-barAlpf).y+grad(1-barAlpf).z)*(grad(1-barAlpf).x+grad(1-barAlpf).y+grad(1-barAlpf).z)";
		autowrite true;
		nBin 100;
		min -1.e-06;
		max  1.e-06; //0.005;   
	}	

    	gradAlpp
    	{
    		fieldName gradAlpp;
		expression "sqrt(grad(1-barAlpf.x*grad(1-barAlpf).x + grad(1-barAlpf).y*grad(1-barAlpf).y + grad(1-barAlpf).z*grad(1-barAlpf).z )";
		autowrite true;
		nBin 100;
		min 0;
		max  1.e-06; //0.005;   
	}
    }
    /* */
    
    /* 
    multiVarsConditionalAve
    {
	outputRelativePath "./filteredDrag";
	variableList ( BBmicroLag BBmicroEul BBmicroLagNum BBmicroLagDom BBmicroEulNum BBmicroEulDom );
	//averagingVariableList ( baralpp tildeUslip );
	averagingVariableList ( baralpp baralppalpp );
	//averagingVariableList ( baralpp barFlucAlppFlucAlpp );

	baralpp
	{
        	fieldName baralpp;
        	expression "1-barAlpf";
        	autowrite true;
        	//nBin 20;
        	//min 0;
        	//max 0.6;
		nBin 1;
                //min 0.08;
                //max 0.12;
		//min 0.18;
		//max 0.22;
		//min 0.03;
		//max 0.07;		
		min 0.08;
		max 0.12;
	}
	
	tildeUslip
	{
        	fieldName tildeUslip;
        	expression "tildeUf.z-tildeUs.z";
		autowrite true;
        	nBin 10;
        	min 0;
        	max 0.5;
	}
	
        baralppalpp
        {
                fieldName baralppalpp;
                expression "barAlppAlpp-(1-barAlpf)*(1-barAlpf)";
                autowrite true;
                nBin 40;
                min 0;
                max 0.06;
        }
	
        barFlucAlppFlucAlpp
        {
                fieldName baralppalpp;
                expression "barFlucAlppFlucAlpp";
                autowrite true;
                nBin 100;
                min 0;
                max 0.025;
        }		
    }
    */  
       
}




// ************************************************************************* //
