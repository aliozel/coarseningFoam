/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright held by original author
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 2 of the License, or (at your
    option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM; if not, write to the Free Software Foundation,
    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Application
    testMomentOfFluid

Description
    Driver for testing MomentOfFluid intersection algorithms

Author
    Sandeep Menon
    University of Massachusetts Amherst
    All rights reserved

\*---------------------------------------------------------------------------*/

#include "Time.H"
#include "fvMesh.H"
#include "argList.H"
#include "volFields.H"
#include "timeSelector.H"
#include "fvCFD.H"

#include "MomentOfFluid.H"

using namespace Foam;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Main program:

int main(int argc, char *argv[])
{

    timeSelector::addOptions();
#   include "addRegionOption.H"

#   include "setRootCase.H"
#   include "createTime.H"
#   include "createMesh.H"

    instantList timeDirs = timeSelector::select0(runTime, args);

    // Construct intersector
    MomentOfFluid mof(mesh);
    
    // Solid volume fraction
    volScalarField alpha
    (
        IOobject
        (
            "alpha.water",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
            IOobject::AUTO_WRITE
        ),
        mesh
    );

    // Cell center
    volVectorField refCentres
    (
        IOobject
        (
            "refCentres",
            runTime.timeName(),
            mesh,
            IOobject::MUST_READ,
	    IOobject::NO_WRITE
        ),
        mesh.C()
    );

    forAll(timeDirs, timeI)
    {
        runTime.setTime(timeDirs[timeI], timeI);

        Info<< "Time = " << runTime.timeName() << endl;

	// Surface normals
	volVectorField nByMof
	(
            IOobject
            (
        	"interfaceNormals",
        	runTime.timeName(),
        	mesh,
        	IOobject::NO_READ,
		IOobject::AUTO_WRITE
            ),
            mesh,
	    dimensionedVector("zero",dimensionSet(0, 0, 0, 0, 0), vector(0,0,0))
	); 

	volVectorField nByGradAlpha
	(
            IOobject
            (
        	"interfaceNormals",
        	runTime.timeName(),
        	mesh,
        	IOobject::NO_READ,
		IOobject::AUTO_WRITE
            ),
            mesh,
	    dimensionedVector("zero",dimensionSet(0, 0, 0, 0, 0), vector(0,0,0))
	);

	Info<< tab <<"Reading alpha" << endl;
	IOobject alphamHeader
	(
        	"alpha.water",
        	runTime.timeName(),
        	mesh,
        	IOobject::MUST_READ
	);
	volScalarField alpham(alphamHeader,mesh);
	alpha = alpham;

	// Compute surfaces and output
	mof.constructInterface
	(
            alpha.internalField(),
            refCentres.internalField()
	);
	
	// Surface normals by reconstruction
	vectorField nByMofvec = mof.interfaceNormals();
	
	// Surface normals by grad(alpha)/|grad(alpha)|
	volVectorField gradAlpha(fvc::grad(alpha));
	forAll(mesh.cells(),cellI)
	{
	  nByMof[cellI] = nByMofvec[cellI]; 
	  scalar magGradAlpha = mag(gradAlpha[cellI]);
	  nByGradAlpha[cellI] = gradAlpha[cellI]/magGradAlpha;
        } 
	nByMof.correctBoundaryConditions();
	nByGradAlpha.correctBoundaryConditions();

	// Write into time folder
	nByMof.write();
	nByGradAlpha.write();
	
	// Output VTK file
	mof.outputSurface();
    }	
}
