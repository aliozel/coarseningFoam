{
    scalar pi = M_PI;
    vector position(0,0,0);
    label  particleCenterCellID(-1);
    scalar radius(-1.);
    
    // Lists for mapping function
    //cellsPerParticle.setSize(nP[me]);
    neighboringCellIDs.setSize(nP[me],subCellIDsList);
    
    particleWeights.setSize(nP[me],subCellList);
    particleVolumes.setSize(nP[me],subCellList);
    
    // Neighbouring cells
    CPCCellToCellStencil neighbourCells(mesh);    
    
    for(label index = 0; index < nP[me]; index++)
    {

            position = positions[me][index];
            particleCenterCellID = cellIDs[index];
            radius = radii[me][index];
            scalar volume =  4./3.*pi*radius*radius*radius;

	    scalarField particleWeightsGauss(maxCellPerPart,scalar(0.0));
	    scalar dist_s(0);
	    scalar sumWeights(0);
	    scalar cellVolume13rd(0);
	    
	    // debug
            if( index==0 ) Info << tab << "Particle 0 cell ID  = " << particleCenterCellID << endl; 
            
	    if (particleCenterCellID > -1)
            {
		    const labelList& cellsNeigh = mesh.cellCells()[particleCenterCellID]; //neighbourCells[particleCenterCellID];
		    sumWeights = 0;
		    dist_s = 0;

		    forAll(cellsNeigh,jj)
		    { 
			    if( jj != 0 ) neighboringCellIDs[index][jj] = cellsNeigh[jj]; //adding subcell representation
						    
			    // Find distances between particle and neighbouring cells
			    cellVolume13rd = Foam::pow(mesh.V()[cellsNeigh[jj]],1./3.);				
			    dist_s = mag(mesh.C()[cellsNeigh[jj]]-position)/cellVolume13rd;

			    if(dist_s <= 0.5)
			    {		
				    particleWeightsGauss[jj] =  1./4.*pow(dist_s,4)-5./8.*pow(dist_s,2)+115./192.;
			    }
			    else if (dist_s > 0.5 && dist_s <= 1.5)
			    {		
				    particleWeightsGauss[jj] = -1./6.*pow(dist_s,4)+5./6.*pow(dist_s,3)-5./4.*pow(dist_s,2)+5./24.*dist_s+55./96.;
			    }
			    else if (dist_s > 1.5 && dist_s <= 2.5)
			    {		
				    particleWeightsGauss[jj] =  pow(2.5-dist_s,4)/24.;
			    }
			    else
			    {		
				    particleWeightsGauss[jj] = 0;
			    }

			    sumWeights += particleWeightsGauss[jj];
			    
			    // debug
                    	    if( index==0 ) Info << tab << "Particle 0 gaussian weights = " << particleWeightsGauss[jj] << endl;

		    }
		    // debug
                    if( index==0 ) Info << tab << "Particle 0 sum of gaussian weights = " << sumWeights << endl;
    
		    forAll(cellsNeigh,jj)
		    {	
			    if ( sumWeights != 0 )
			    {
                		    // volume occupied in every covered cell
                		    scalar occupiedVolume = volume*particleWeightsGauss[jj]/sumWeights;

                		    // correct volumefraction of centre
                		    mappedVoidfraction[cellsNeigh[jj]] -= occupiedVolume/mesh.V()[cellsNeigh[jj]];
				    
				    if( index==0 )
                    		    {   
					Info << tab << "Particle 0 void fraction contribution into cell " << cellsNeigh[jj] 
					     << " " << mappedVoidfraction[cellsNeigh[jj]] << endl;
                    		    }	

                		    particleWeights[index][jj] = particleWeightsGauss[jj]/sumWeights;
                		    particleVolumes[index][jj] = occupiedVolume;
			    }
			    else
			    {
			    	    particleWeights[index][jj] = 0.;
                		    particleVolumes[index][jj] = 0.;	
			    }
		    }
								
            }// end if in cell
    }// end loop all particles
    
    Info << tab << "Writing mapped volume fraction... " << endl;
    mappedVoidfraction.write();
    // Update mappedVoidfraction
    //forAll(mesh.cells(),index) mappedVoidfraction[index] = 1.;  

}
